package main

import (
	"flag"
	"log"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/justin/echome-be/docs"
)

var configPath = flag.String("f", "config/etc/config.yaml", "config file path")

// @title EchoMe API
// @version 1.0
// @description This is a sample server for EchoMe application.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email support@echome.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /api
func main() {
	flag.Parse()

	log.Printf("Starting EchoMe API server...")
	log.Printf("Using configuration file: %s", *configPath)

	// Initialize the application with all dependencies
	log.Println("Initializing application dependencies...")
	application, err := InitializeApplication(*configPath)
	if err != nil {
		log.Fatalf("Failed to initialize application: %v\n", err)
	}

	// Validate all services before starting
	log.Println("Validating services...")
	if err := application.ValidateServices(); err != nil {
		log.Fatalf("Service validation failed: %v\n", err)
	}

	log.Println("✓ Application initialized and validated successfully")
	log.Println("✓ All WebSocket endpoints registered:")
	log.Println("  - /ws/asr (Automatic Speech Recognition)")
	log.Println("  - /ws/tts (Text-to-Speech)")
	log.Println("  - /ws/webrtc/:sessionId/:userId (WebRTC Signaling)")
	log.Println("  - /ws/voice-conversation/:characterId (Voice Conversation)")
	log.Println("✓ Health check endpoint available at /health")
	log.Println("✓ API documentation available at /swagger/")

	// Run the application
	if err := application.Run(); err != nil {
		log.Fatalf("Application error: %v\n", err)
	}
}
