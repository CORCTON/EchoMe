name: CI 构建与部署

on:
  push:
    branches: [ main ]
    paths:
      - 'echome-be/**'
      - 'echome-fe/**'
      - 'deploy/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force deploy even if no code changes'
        required: false
        default: 'false'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  SERVER_HOST: 115.190.101.38
  SERVER_USER: deploy

jobs:
  changes:
    name: 变更检测
    runs-on: ubuntu-latest
    outputs:
      be: ${{ steps.filter.outputs.be }}
      fe: ${{ steps.filter.outputs.fe }}
    steps:
      - uses: actions/checkout@v4
      - name: Filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            be:
              - 'echome-be/**'
            fe:
              - 'echome-fe/**'

  build-push:
    name: 构建并推送镜像
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [be, fe]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 登录 GHCR 镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 判断是否跳过
        id: decide
        run: |
          svc=${{ matrix.service }}
          force=${{ github.event.inputs.force || 'false' }}
          be_changed='${{ needs.changes.outputs.be }}'
          fe_changed='${{ needs.changes.outputs.fe }}'
          if [ "$svc" = "be" ] && [ "$be_changed" != "true" ] && [ "$force" != "true" ]; then echo "skip=true" >> $GITHUB_OUTPUT; fi
          if [ "$svc" = "fe" ] && [ "$fe_changed" != "true" ] && [ "$force" != "true" ]; then echo "skip=true" >> $GITHUB_OUTPUT; fi
      - name: 跳过提示
        if: steps.decide.outputs.skip == 'true'
        run: echo "当前服务无变更且未强制执行，跳过构建。"
      - name: 构建并推送
        if: steps.decide.outputs.skip != 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service == 'be' && 'echome-be' || 'echome-fe' }}
          file: ${{ matrix.service == 'be' && 'echome-be/Dockerfile' || 'echome-fe/Dockerfile' }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/echome-${{ matrix.service }}:latest
            ghcr.io/${{ github.repository_owner }}/echome-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/echome-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/echome-${{ matrix.service }}:buildcache,mode=max

  deploy:
    name: 远程部署
    needs: [build-push, changes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [be, fe]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: 判断是否需要部署
        id: should-deploy
        run: |
          svc=${{ matrix.service }}
          force=${{ github.event.inputs.force || 'false' }}
          be_changed='${{ needs.changes.outputs.be }}'
          fe_changed='${{ needs.changes.outputs.fe }}'
          
          should_deploy=false
          if [ "$force" = "true" ]; then
            should_deploy=true
            echo "强制部署模式，部署 $svc"
          elif [ "$svc" = "be" ] && [ "$be_changed" = "true" ]; then
            should_deploy=true
            echo "后端代码有变更，部署后端"
          elif [ "$svc" = "fe" ] && [ "$fe_changed" = "true" ]; then
            should_deploy=true
            echo "前端代码有变更，部署前端"
          else
            echo "$svc 无变更，跳过部署"
          fi
          
          echo "deploy=$should_deploy" >> $GITHUB_OUTPUT

      - name: 配置 SSH
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: 复制部署文件
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          scp -o StrictHostKeyChecking=no deploy/docker-compose.yml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:~/deploy/
          
      - name: 部署 ${{ matrix.service }} 到服务器
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} \
            "GHCR_USERNAME='${{ secrets.GHCR_USERNAME }}' GHCR_TOKEN='${{ secrets.GHCR_TOKEN }}' OWNER_LOWER='${{ github.repository_owner }}' SERVICE='${{ matrix.service }}' bash -s" <<'EOF'
          set -e          
          # GHCR 登录
          echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

          # 设置环境变量
          export OWNER_LOWER="${OWNER_LOWER,,}"  # 转换为小写
          
          # 只拉取和重启指定的服务
          echo "拉取 echome-${SERVICE} 镜像..."
          docker compose -f ~/deploy/docker-compose.yml pull echome-${SERVICE}
          
          echo "重启 echome-${SERVICE} 服务..."
          docker compose -f ~/deploy/docker-compose.yml up -d echome-${SERVICE}
          
          # 清理无用镜像
          docker image prune -f || true
          
          echo "✓ echome-${SERVICE} 部署完成"
          EOF