name: CI Build & Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'echome-be/**'
      - 'echome-fe/**'
      - 'deploy/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force deploy even if no code changes'
        required: false
        default: 'false'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  SERVER_HOST: 115.190.101.38
  DOCKER_COMPOSE_PATH: /opt/echome/deploy/docker-compose.yml

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      be: ${{ steps.filter.outputs.be }}
      fe: ${{ steps.filter.outputs.fe }}
    steps:
      - uses: actions/checkout@v4
      - name: Filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            be:
              - 'echome-be/**'
            fe:
              - 'echome-fe/**'

  build-push:
    name: Build & Push Images
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [be, fe]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Compute lowercase owner
        id: meta
        run: |
          owner_lower=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lower=$owner_lower" >> $GITHUB_OUTPUT
      - name: Decide skip
        id: decide
        run: |
          svc=${{ matrix.service }}
          force=${{ github.event.inputs.force || 'false' }}
          be_changed='${{ needs.changes.outputs.be }}'
          fe_changed='${{ needs.changes.outputs.fe }}'
          echo "service=$svc force=$force be=$be_changed fe=$fe_changed"
          if [ "$svc" = "be" ] && [ "$be_changed" != "true" ] && [ "$force" != "true" ]; then echo "skip=true" >> $GITHUB_OUTPUT; fi
          if [ "$svc" = "fe" ] && [ "$fe_changed" != "true" ] && [ "$force" != "true" ]; then echo "skip=true" >> $GITHUB_OUTPUT; fi
      - name: Skip notice
        if: steps.decide.outputs.skip == 'true'
        run: echo "No changes for this service and not forced. Skipping build."
      - name: Set up QEMU
        if: steps.decide.outputs.skip != 'true'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: steps.decide.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        if: steps.decide.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        if: steps.decide.outputs.skip != 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service == 'be' && 'echome-be' || 'echome-fe' }}
          file: ${{ matrix.service == 'be' && 'echome-be/Dockerfile' || 'echome-fe/Dockerfile' }}
          push: true
          tags: |
            ghcr.io/${{ steps.meta.outputs.owner_lower }}/echome-${{ matrix.service }}:latest
            ghcr.io/${{ steps.meta.outputs.owner_lower }}/echome-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.meta.outputs.owner_lower }}/echome-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ steps.meta.outputs.owner_lower }}/echome-${{ matrix.service }}:buildcache,mode=max

  deploy:
    name: Remote Deploy
    needs: [build-push, changes]
    runs-on: ubuntu-latest
    # Deploy when build-push succeeded or when forced. This prevents skipping deployment when images were built
    if: ${{ needs.build-push.result == 'success' || github.event.inputs.force == 'true' }}
    steps:
      - name: Prepare SSH password auth
        run: |
          sudo apt-get update -y && sudo apt-get install -y sshpass
      - name: Compute lowercase owner
        id: meta
        run: |
          owner_lower=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lower=$owner_lower" >> $GITHUB_OUTPUT
      - name: Deploy via SSH
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ env.SERVER_HOST }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST <<'EOF'
          set -e
          sudo mkdir -p /opt/echome
          cd /opt/echome
          if [ ! -d deploy ]; then
            mkdir deploy
          fi
          # 始终使用仓库脚本安装（或重新安装）Docker（简化逻辑，不做检测）
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker not found. Installing via repository script...";
            TMP_SCRIPT=/tmp/install_docker.sh
            (curl -fsSL https://gist.githubusercontent.com/wusisu/38f800cacf58a84ca6d59e6347a8f6ae/raw/f4d01e1277f5c8aea4f3c9d7157393eac4e25848/install-docker-china.sh -o $TMP_SCRIPT || \
             curl -fsSL https://gist.githubusercontent.com/wusisu/38f800cacf58a84ca6d59e6347a8f6ae/raw/f4d01e1277f5c8aea4f3c9d7157393eac4e25848/install-docker.sh -o $TMP_SCRIPT) || { echo 'Download install script failed'; exit 2; }
            chmod +x $TMP_SCRIPT
            sudo bash $TMP_SCRIPT || { echo 'Docker install failed'; exit 3; }
            echo "Docker installation executed.";
          else
            echo "Docker already installed on remote host, skipping installation.";
          fi
          cat > deploy/docker-compose.yml <<COMPOSE
          version: "3.9"
          services:
            echome-be:
              image: ghcr.io/${{ steps.meta.outputs.owner_lower }}/echome-be:latest
              restart: unless-stopped
              ports:
                - "8081:8081"
            echome-fe:
              image: ghcr.io/${{ steps.meta.outputs.owner_lower }}/echome-fe:latest
              restart: unless-stopped
              ports:
                - "3000:3000"
              depends_on:
                - echome-be
          COMPOSE
          echo "Pulling latest images..."
          sudo docker compose -f deploy/docker-compose.yml pull
          echo "Recreating containers..."
          sudo docker compose -f deploy/docker-compose.yml up -d
          sudo docker image prune -f || true
          EOF
